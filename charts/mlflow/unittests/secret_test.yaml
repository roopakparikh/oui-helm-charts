suite: test secret

templates:
  - secret.yaml

tests:
  - it: should have user and password when postgres is enabled
    set:
      backendStore.postgres.enabled: true
      backendStore.postgres.user: postgres
      backendStore.postgres.password: P455w0rd!
    asserts:
      - equal:
          path: data.PGUSER
          value: postgres
          decodeBase64: true
      - equal:
          path: data.PGPASSWORD
          value: P455w0rd!
          decodeBase64: true

  - it: should have user and password when mysql is enabled
    set:
      backendStore.mysql.enabled: true
      backendStore.mysql.user: mysql
      backendStore.mysql.password: P455w0rd!
    asserts:
      - equal:
          path: data.MYSQL_USERNAME
          value: mysql
          decodeBase64: true
      - equal:
          path: data.MYSQL_PWD
          value: P455w0rd!
          decodeBase64: true

  - it: should have azure connection string when azureBlob is enabled and connection string set
    set:
      artifactRoot.azureBlob.enabled: true
      artifactRoot.azureBlob.container: mlflow
      artifactRoot.azureBlob.storageAccount: devstoreaccount1
      artifactRoot.azureBlob.connectionString: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1
    asserts:
      - equal:
          path: data.AZURE_STORAGE_CONNECTION_STRING
          value: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1
          decodeBase64: true

  - it: should have azure storage access key when azureBlob is enabled and access key set
    set:
      artifactRoot.azureBlob.enabled: true
      artifactRoot.azureBlob.container: mlflow
      artifactRoot.azureBlob.storageAccount: devstoreaccount1
      artifactRoot.azureBlob.accessKey: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    asserts:
      - equal:
          path: data.AZURE_STORAGE_ACCESS_KEY
          value: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
          decodeBase64: true

  - it: should have aws access key id and secret access key when s3 is enabled and parameters set
    set:
      artifactRoot.s3.enabled: true
      artifactRoot.s3.bucket: test-bucket
      artifactRoot.s3.path: mlflow_folder
      artifactRoot.s3.awsAccessKeyId: AKIAIOSFODNN7EXAMPLE
      artifactRoot.s3.awsSecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    asserts:
      - equal:
          path: data.AWS_ACCESS_KEY_ID
          value: AKIAIOSFODNN7EXAMPLE
          decodeBase64: true
      - equal:
          path: data.AWS_SECRET_ACCESS_KEY
          value: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
          decodeBase64: true

  - it: should match snapshot of default values
    release:
      name: mlflow
      namespace: mlflow
    chart:
      version: 1.0.0
      appVersion: 1.0.0
    asserts:
      - matchSnapshot: { }

  - it: should use ldap configurations when ldap auth enabled
    set:
      ldapAuth.enabled: true
      ldapAuth.uri: "ldap://lldap:3890/dc=mlflow,dc=test"
      ldapAuth.tlsVerification: optional
      ldapAuth.lookupBind: "uid=%s,ou=people,dc=mlflow,dc=test"
      ldapAuth.groupAttribute: "dn"
      ldapAuth.searchBaseDistinguishedName: "ou=groups,dc=mlflow,dc=test"
      ldapAuth.searchFilter: "(&(objectclass=groupOfUniqueNames)(uniquemember=%s))"
      ldapAuth.adminGroupDistinguishedName: "cn=test-admin,ou=groups,dc=mlflow,dc=test"
      ldapAuth.userGroupDistinguishedName: "cn=test-user,ou=groups,dc=mlflow,dc=test"
    asserts:
      - equal:
          path: data.LDAP_URI
          value: ldap://lldap:3890/dc=mlflow,dc=test
          decodeBase64: true
      - equal:
          path: data.LDAP_TLS_VERIFY
          value: optional
          decodeBase64: true
      - equal:
          path: data.LDAP_LOOKUP_BIND
          value: uid=%s,ou=people,dc=mlflow,dc=test
          decodeBase64: true
      - equal:
          path: data.LDAP_GROUP_ATTRIBUTE
          value: dn
          decodeBase64: true
      - equal:
          path: data.LDAP_GROUP_SEARCH_BASE_DN
          value: ou=groups,dc=mlflow,dc=test
          decodeBase64: true
      - equal:
          path: data.LDAP_GROUP_SEARCH_FILTER
          value: (&(objectclass=groupOfUniqueNames)(uniquemember=%s))
          decodeBase64: true
      - equal:
          path: data.LDAP_GROUP_ADMIN_DN
          value: cn=test-admin,ou=groups,dc=mlflow,dc=test
          decodeBase64: true
      - equal:
          path: data.LDAP_GROUP_USER_DN
          value: cn=test-user,ou=groups,dc=mlflow,dc=test
          decodeBase64: true
