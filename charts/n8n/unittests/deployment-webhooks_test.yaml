suite: test deployment-webhook

templates:
  - configmap.yaml
  - deployment-webhook.yaml

release:
  name: n8n
  namespace: n8n

chart:
  version: 1.0.0
  appVersion: 1.0.0

set:
  webhook:
    mode: queue
  db:
    type: postgresdb

tests:
  - it: should not have webhook deployment when dbtype is sqlite
    set:
      db:
        type: sqlite
    asserts:
      - hasDocuments:
          count: 0
        template: deployment-webhook.yaml
  - it: should not have webhook deployment when webhook mode is regular
    set:
      webhook:
        mode: regular
    asserts:
      - hasDocuments:
          count: 0
        template: deployment-webhook.yaml

  - it: should set replica count when webhook count is set
    set:
      webhook:
        count: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
        template: deployment-webhook.yaml

  - it: should set strategy to Recreate when strategy.type is Recreate
    set:
      strategy:
        type: Recreate
    asserts:
      - equal:
          path: spec.strategy.type
          value: Recreate
        template: deployment-webhook.yaml

  - it: should set strategy to RollingUpdate when strategy.type is RollingUpdate
    set:
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
          maxSurge: 1
    asserts:
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
        template: deployment-webhook.yaml
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 1
        template: deployment-webhook.yaml
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 1
        template: deployment-webhook.yaml

  - it: should set pod annotations when podAnnotations are set
    set:
      podAnnotations:
        test: test
    asserts:
      - equal:
          path: spec.template.metadata.annotations.test
          value: test
        template: deployment-webhook.yaml

  - it: should set pod labels when podLabels are set
    set:
      podLabels:
        test: test
    asserts:
      - equal:
          path: spec.template.metadata.labels.test
          value: test
        template: deployment-webhook.yaml

  - it: should set image pull secrets when imagePullSecrets are set
    set:
      imagePullSecrets:
        - name: fake-image-pull-secret
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: fake-image-pull-secret
        template: deployment-webhook.yaml

  - it: should be custom service account when we do not create it
    set:
      serviceAccount:
        create: false
        name: customsa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: customsa
        template: deployment-webhook.yaml

  - it: should set pod security context when podSecurityContext is set
    set:
      podSecurityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.securityContext.runAsGroup
          value: 1000
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
        template: deployment-webhook.yaml

  - it: should set container security context when securityContext is set
    set:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].securityContext.runAsUser
          value: 1000
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].securityContext.runAsGroup
          value: 1000
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].securityContext.runAsNonRoot
          value: true
        template: deployment-webhook.yaml

  - it: should use image repository and tag from image when they set
    set:
      image:
        repository: fake-image-repository/fake-image
        tag: fake-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].image
          value: fake-image-repository/fake-image:fake-tag
        template: deployment-webhook.yaml

  - it: should use default image and chart app version as image tag when tag is not set
    set:
      image:
        tag: ""
    release:
      name: outline
      namespace: outline
    chart:
      version: 1.0.0
      appVersion: 0.81.0
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].image
          value: n8nio/n8n:0.81.0
        template: deployment-webhook.yaml

  - it: should set image pull policy when imagePullPolicy is set
    set:
      image.pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].imagePullPolicy
          value: Always
        template: deployment-webhook.yaml

  - it: should set command to n8n with webhook arg
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].command
          content:
            n8n
        template: deployment-webhook.yaml
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].args
          content: webhook
        template: deployment-webhook.yaml

  - it: should set ports when service.port is set
    set:
      service:
        port: 8080
        name: fake-port
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].ports[0].name
          value: fake-port
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].ports[0].containerPort
          value: 8080
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].ports[0].protocol
          value: TCP
        template: deployment-webhook.yaml

  - it: should set liveness probe when livenessProbe is set
    set:
      livenessProbe:
        httpGet:
          path: /healthz
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.httpGet.path
          value: /healthz
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.httpGet.port
          value: http
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.initialDelaySeconds
          value: 10
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.periodSeconds
          value: 10
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.timeoutSeconds
          value: 5
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.failureThreshold
          value: 3
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].livenessProbe.successThreshold
          value: 1
        template: deployment-webhook.yaml

  - it: should set readiness probe when readinessProbe is set
    set:
      readinessProbe:
        httpGet:
          path: /healthz/readiness
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 3
        successThreshold: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.httpGet.path
          value: /healthz/readiness
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.httpGet.port
          value: http
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.initialDelaySeconds
          value: 10
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.periodSeconds
          value: 10
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.timeoutSeconds
          value: 5
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.failureThreshold
          value: 3
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].readinessProbe.successThreshold
          value: 1
        template: deployment-webhook.yaml

  - it: should set resources when resources are set
    set:
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
        limits:
          cpu: 200m
          memory: 200Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.requests.cpu
          value: 100m
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.requests.memory
          value: 100Mi
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.limits.cpu
          value: 200m
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.limits.memory
          value: 200Mi
        template: deployment-webhook.yaml

  - it: should set resources when webhook.resources are set
    set:
      webhook:
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.requests.cpu
          value: 100m
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.requests.memory
          value: 100Mi
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.limits.cpu
          value: 200m
        template: deployment-webhook.yaml
      - equal:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].resources.limits.memory
          value: 200Mi
        template: deployment-webhook.yaml

  - it: should set hiring banner disabled
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_HIRING_BANNER_ENABLED
            value: "false"
        template: deployment-webhook.yaml

  - it: should set node environment to production
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: NODE_ENV
            value: production
        template: deployment-webhook.yaml

  - it: should set enforce settings file permissions
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS
            value: "true"
        template: deployment-webhook.yaml

  - it: should set port environment variable when service.port is set
    set:
      service:
        port: 8080
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_PORT
            value: "8080"
        template: deployment-webhook.yaml

  - it: should set default locale environment variable when defaultLocale is set
    set:
      defaultLocale: de
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_DEFAULT_LOCALE
            value: de
        template: deployment-webhook.yaml

  - it: should set timezone environment variable when timezone is set
    set:
      timezone: America/New_York
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: GENERIC_TIMEZONE
            value: America/New_York
        template: deployment-webhook.yaml

  - it: should set graceful shutdown timeout environment variable when gracefulShutdownTimeout is set
    set:
      gracefulShutdownTimeout: 10
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_GRACEFUL_SHUTDOWN_TIMEOUT
            value: "10"
        template: deployment-webhook.yaml

  - it: should disable ui for the webhook
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_DISABLE_UI
            value: "true"
        template: deployment-webhook.yaml

  - it: should set webhook url environment variable when webhook.url is set
    set:
      webhook:
        url: https://example.com
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: WEBHOOK_URL
            value: https://example.com
        template: deployment-webhook.yaml

  - it: should set postgresdb user environment variable when postgresql.enabled is true and postgresql.auth.username is set
    set:
      postgresql:
        enabled: true
        auth:
          username: n8npostgres
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: DB_POSTGRESDB_USER
            value: n8npostgres
        template: deployment-webhook.yaml

  - it: should set postgresdb user environment variable when postgresql.enabled is false and externalPostgresql.username is set
    set:
      db:
        type: postgresdb
      postgresql:
        enabled: false
      externalPostgresql:
          username: n8npostgres
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: DB_POSTGRESDB_USER
            value: n8npostgres
        template: deployment-webhook.yaml

  - it: should set postgresdb password environment variable from secret with key password when postgresql.enabled is true and postgresql.auth.password is set
    set:
      db:
        type: postgresdb
      postgresql:
        enabled: true
        auth:
          username: n8npostgres
          password: n8npostgrespassword
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: n8n-postgresql
                key: password
                optional: true
        template: deployment-webhook.yaml

  - it: should set postgresdb password environment variable from secret with key postgres-password when postgresql.auth.username is not set
    set:
      db:
        type: postgresdb
      postgresql:
        enabled: true
        auth:
          username: ""
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: n8n-postgresql
                key: postgres-password
                optional: true
        template: deployment-webhook.yaml

  - it: should set postgresdb password environment variable from secret with key postgres-password and with externalPostgresql.existingSecret when externalPostgresql.existingSecret is set
    set:
      db:
        type: postgresdb
      externalPostgresql:
        existingSecret: custom-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: DB_POSTGRESDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: custom-secret
                key: postgres-password
                optional: true
        template: deployment-webhook.yaml

  - it: should set queue health check active environment variable
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: QUEUE_HEALTH_CHECK_ACTIVE
            value: "true"
        template: deployment-webhook.yaml

  - it: should set redis username environment variable from secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: QUEUE_BULL_REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                name: n8n-redis
                key: redis-username
                optional: true
        template: deployment-webhook.yaml

  - it: should set redis username environment variable from external secret when externalRedis.existingSecret is set
    set:
      externalRedis:
        existingSecret: custom-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: QUEUE_BULL_REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                name: custom-secret
                key: redis-username
                optional: true
        template: deployment-webhook.yaml

  - it: should set redis password environment variable from secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: QUEUE_BULL_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: n8n-redis
                key: redis-password
                optional: true
        template: deployment-webhook.yaml

  - it: should set redis password environment variable from external secret when externalRedis.existingSecret is set
    set:
      externalRedis:
        existingSecret: custom-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: QUEUE_BULL_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: custom-secret
                key: redis-password
                optional: true
        template: deployment-webhook.yaml

  - it: should set extra environment variables when extraEnvVars is set
    set:
      extraEnvVars:
        N8N_EXTRA_ENV_VAR: n8nextraenvvar
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_EXTRA_ENV_VAR
            value: n8nextraenvvar
        template: deployment-webhook.yaml

  - it: should set extra environment variables when webhook.extraEnvVars is set
    set:
      webhook:
        extraEnvVars:
          N8N_EXTRA_ENV_VAR: n8nextraenvvar
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_EXTRA_ENV_VAR
            value: n8nextraenvvar
        template: deployment-webhook.yaml

  - it: should set n8n runners enabled environment variable
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_ENABLED
            value: "true"
        template: deployment-webhook.yaml

  - it: should set n8n runners mode environment variable
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_MODE
            value: internal
        template: deployment-webhook.yaml

  - it: should set database configurations from database configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-database-configmap
        template: deployment-webhook.yaml

  - it: should set logging configurations from logging configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-logging-configmap
        template: deployment-webhook.yaml

  - it: should set diagnostics configurations from diagnostics configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-diagnostics-configmap
        template: deployment-webhook.yaml

  - it: should set version notifications configurations from version notifications configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-version-notifications-configmap
        template: deployment-webhook.yaml

  - it: should set public api configurations from public api configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-public-api-configmap
        template: deployment-webhook.yaml

  - it: should set queue configurations from queue configmap
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            configMapRef:
              name: n8n-queue-configmap
        template: deployment-webhook.yaml

  - it: should set encryption key from encryption key secret
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            secretRef:
              name: n8n-encryption-key-secret-v2
        template: deployment-webhook.yaml

  - it: should set extra secret names for envFrom when extraSecretNamesForEnvFrom is set
    set:
      extraSecretNamesForEnvFrom:
        - secret1
        - secret2
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            secretRef:
              name: secret1
        template: deployment-webhook.yaml
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            secretRef:
              name: secret2
        template: deployment-webhook.yaml

  - it: should set extra secret names for envFrom when webhook.extraSecretNamesForEnvFrom is set
    set:
      webhook:
        extraSecretNamesForEnvFrom:
          - secret1
          - secret2
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            secretRef:
              name: secret1
        template: deployment-webhook.yaml
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].envFrom
          content:
            secretRef:
              name: secret2
        template: deployment-webhook.yaml

  - it: should set extra volume mounts when volumeMounts is set
    set:
      volumeMounts:
        - name: fake-volume
          mountPath: /fake-path
          readOnly: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].volumeMounts
          content:
            name: fake-volume
            mountPath: /fake-path
            readOnly: true
        template: deployment-webhook.yaml

  - it: should set extra volume mounts when webhook.volumeMounts is set
    set:
      webhook:
        volumeMounts:
          - name: fake-volume
            mountPath: /fake-path
            readOnly: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].volumeMounts
          content:
            name: fake-volume
            mountPath: /fake-path
            readOnly: true
        template: deployment-webhook.yaml

  - it: should set extra volumes when volumes is set
    set:
      volumes:
        - name: foo
          secret:
            secretName: mysecret
            optional: false
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: foo
            secret:
              secretName: mysecret
              optional: false
        template: deployment-webhook.yaml

  - it: should set extra volumes when wevhook.volumes is set
    set:
      webhook:
        volumes:
          - name: foo
            secret:
              secretName: mysecret
              optional: false
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: foo
            secret:
              secretName: mysecret
              optional: false
        template: deployment-webhook.yaml

  - it: should set node selector when nodeSelector is set
    set:
      nodeSelector:
        disktype: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.disktype
          value: ssd
        template: deployment-webhook.yaml

  - it: should set affinity when affinity is set
    set:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: disktype
                    operator: In
                    values:
                      - ssd
    asserts:
      - contains:
          path: spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution
          content:
            weight: 1
            preference:
              matchExpressions:
                - key: disktype
                  operator: In
                  values:
                    - ssd
        template: deployment-webhook.yaml

  - it: should set tolerations when tolerations are set
    set:
      tolerations:
        - key: fake-key
          operator: fake-operator
          value: fake-value
    asserts:
      - contains:
          path: spec.template.spec.tolerations
          content:
            key: fake-key
            operator: fake-operator
            value: fake-value
        template: deployment-webhook.yaml

  - it: should set task runner enabled environment variable
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_ENABLED
            value: "true"
        template: deployment-webhook.yaml

  - it: should set task runner mode environment variable
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_MODE
            value: internal
        template: deployment-webhook.yaml

  - it: should set task runner timeout environment variable
    set:
      taskRunners:
        taskTimeout: 30
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_TASK_TIMEOUT
            value: "30"
        template: deployment-webhook.yaml

  - it: should set task runner heartbeat interval environment variable
    set:
      taskRunners:
        taskHeartbeatInterval: 15
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_HEARTBEAT_INTERVAL
            value: "15"
        template: deployment-webhook.yaml

  - it: should set task runner max concurrency environment variable
    set:
      taskRunners:
        maxConcurrency: 2
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "n8n-webhook")].env
          content:
            name: N8N_RUNNERS_MAX_CONCURRENCY
            value: "2"
        template: deployment-webhook.yaml
